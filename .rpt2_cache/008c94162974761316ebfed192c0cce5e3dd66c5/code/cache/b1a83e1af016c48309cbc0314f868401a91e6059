{"map":"{\"version\":3,\"file\":\"HarvestTask.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/tasks/HarvestTask.ts\"],\"names\":[],\"mappings\":\"AAEA,qEAAqE;AACrE,MAAM;IACK,MAAM,CAAC,GAAG,CAAC,KAAY;QAE1B,aAAa;QACb,IAAI,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5C,IAAI,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEpC,2BAA2B;QAC3B,yFAAyF;QACzF,IAAI,UAAU,IAAI,KAAK,CAAC,aAAa,EAAE;YACnC;;;cAGE;YACF,KAAK,CAAC,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC;YAC9C,KAAK,CAAC,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;SACjC;aAAM;YACH,cAAc;YACd,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,gBAAgB,EAAE;gBAC/C,2BAA2B;gBAC3B,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;aAC3B;SACJ;IACL,CAAC;CACJ\"}","code":"// Class that contains creep logic for Harvesting energy from source.\r\nexport class HarvestTask {\r\n    static run(creep) {\r\n        // Task Setup\r\n        let sources = creep.room.find(FIND_SOURCES);\r\n        let cargoTotal = _.sum(creep.carry);\r\n        // If we have room to carry\r\n        // console.log(creep.name + \" is carrying \" + cargoTotal + \" of \" + creep.carryCapacity);\r\n        if (cargoTotal == creep.carryCapacity) {\r\n            /* TRC log\r\n            console.log(creep.name + \" FULL!\");\r\n            console.log(creep.name + \" | Task Set To \" + creep.memory.prevTask);\r\n            */\r\n            creep.memory.currTask = creep.memory.prevTask;\r\n            creep.memory.prevTask = \"TRF\";\r\n        }\r\n        else {\r\n            // Mine source\r\n            if (creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\r\n                // console.log(\"Moving...\")\r\n                creep.moveTo(sources[0]);\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=HarvestTask.js.map"}
