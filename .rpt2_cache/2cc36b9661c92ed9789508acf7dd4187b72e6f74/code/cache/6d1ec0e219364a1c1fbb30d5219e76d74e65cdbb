{"map":"{\"version\":3,\"file\":\"ErrorMapper.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/utils/ErrorMapper.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"// tslint:disable:no-conditional-assignment\r\nimport { SourceMapConsumer } from \"source-map\";\r\nexport class ErrorMapper {\r\n    static get consumer() {\r\n        if (this._consumer == null) {\r\n            this._consumer = new SourceMapConsumer(require(\"main.js.map\"));\r\n        }\r\n        return this._consumer;\r\n    }\r\n    /**\r\n     * Generates a stack trace using a source map generate original symbol names.\r\n     *\r\n     * WARNING - EXTREMELY high CPU cost for first call after reset - >30 CPU! Use sparingly!\r\n     * (Consecutive calls after a reset are more reasonable, ~0.1 CPU/ea)\r\n     *\r\n     * @param {Error | string} error The error or original stack trace\r\n     * @returns {string} The source-mapped stack trace\r\n     */\r\n    static sourceMappedStackTrace(error) {\r\n        const stack = error instanceof Error ? error.stack : error;\r\n        if (this.cache.hasOwnProperty(stack)) {\r\n            return this.cache[stack];\r\n        }\r\n        const re = /^\\s+at\\s+(.+?\\s+)?\\(?([0-z._\\-\\\\\\/]+):(\\d+):(\\d+)\\)?$/gm;\r\n        let match;\r\n        let outStack = error.toString();\r\n        while ((match = re.exec(stack))) {\r\n            if (match[2] === \"main\") {\r\n                const pos = this.consumer.originalPositionFor({\r\n                    column: parseInt(match[4], 10),\r\n                    line: parseInt(match[3], 10)\r\n                });\r\n                if (pos.line != null) {\r\n                    if (pos.name) {\r\n                        outStack += `\\n    at ${pos.name} (${pos.source}:${pos.line}:${pos.column})`;\r\n                    }\r\n                    else {\r\n                        if (match[1]) {\r\n                            // no original source file name known - use file name from given trace\r\n                            outStack += `\\n    at ${match[1]} (${pos.source}:${pos.line}:${pos.column})`;\r\n                        }\r\n                        else {\r\n                            // no original source file name known or in given trace - omit name\r\n                            outStack += `\\n    at ${pos.source}:${pos.line}:${pos.column}`;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    // no known position\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                // no more parseable lines\r\n                break;\r\n            }\r\n        }\r\n        this.cache[stack] = outStack;\r\n        return outStack;\r\n    }\r\n    static wrapLoop(loop) {\r\n        return () => {\r\n            try {\r\n                loop();\r\n            }\r\n            catch (e) {\r\n                if (e instanceof Error) {\r\n                    if (\"sim\" in Game.rooms) {\r\n                        const message = `Source maps don't work in the simulator - displaying original error`;\r\n                        console.log(`<span style='color:red'>${message}<br>${_.escape(e.stack)}</span>`);\r\n                    }\r\n                    else {\r\n                        console.log(`<span style='color:red'>${_.escape(this.sourceMappedStackTrace(e))}</span>`);\r\n                    }\r\n                }\r\n                else {\r\n                    // can't handle it\r\n                    throw e;\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n// Cache previously mapped traces to improve performance\r\nErrorMapper.cache = {};\r\n//# sourceMappingURL=ErrorMapper.js.map"}
