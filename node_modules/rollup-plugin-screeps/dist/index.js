'use strict';

var screepsApi = require('screeps-api');
var fs = require('fs');
var git = require('git-rev-sync');
var path = require('path');

function generateSourceMaps(bundle) {
    var b = bundle;
    var tmp = b.map.toString;
    delete b.map.sourceContent;
    b.map.toString = function () {
        return "module.exports = " + tmp.apply(this, arguments) + ";";
    };
}
function writeSourceMaps(options) {
    fs.renameSync(options.file + '.map', options.file + '.map.js');
}
function validateConfig(cfg) {
    if (cfg.hostname && cfg.hostname === 'screeps.com') {
        return [
            typeof cfg.token === "string",
            cfg.protocol === "http" || cfg.protocol === "https",
            typeof cfg.hostname === "string",
            typeof cfg.port === "number",
            typeof cfg.path === "string",
            typeof cfg.branch === "string"
        ].reduce(function (a, b) { return a && b; });
    }
    return [
        (typeof cfg.email === 'string' && typeof cfg.password === 'string') || typeof cfg.token === 'string',
        cfg.protocol === "http" || cfg.protocol === "https",
        typeof cfg.hostname === "string",
        typeof cfg.port === "number",
        typeof cfg.path === "string",
        typeof cfg.branch === "string"
    ].reduce(function (a, b) { return a && b; });
}
function loadConfigFile(configFile) {
    var data = fs.readFileSync(configFile, 'utf8');
    var cfg = JSON.parse(data);
    if (!validateConfig(cfg))
        throw new TypeError("Invalid config");
    if (cfg.email && cfg.password && !cfg.token && cfg.hostname === 'screeps.com') {
        console.log('Please change your email/password to a token');
    }
    return cfg;
}
function uploadSource(config, options, bundle) {
    if (!config) {
        console.log('screeps() needs a config e.g. screeps({configFile: \'./screeps.json\'}) or screeps({config: { ... }})');
    }
    else {
        if (typeof config === "string")
            config = loadConfigFile(config);
        var code_1 = getFileList(options.file);
        var branch_1 = getBranchName(config.branch);
        var api_1 = new screepsApi.ScreepsAPI(config);
        if (!config.token) {
            api_1.auth().then(function () {
                runUpload(api_1, branch_1, code_1);
            });
        }
        else {
            runUpload(api_1, branch_1, code_1);
        }
    }
}
function runUpload(api, branch$$1, code) {
    api.raw.user.branches().then(function (data) {
        var branches = data.list.map(function (b) { return b.branch; });
        if (branches.includes(branch$$1)) {
            api.code.set(branch$$1, code);
        }
        else {
            api.raw.user.cloneBranch('', branch$$1, code);
        }
    });
}
function getFileList(outputFile) {
    var code = {};
    var base = path.dirname(outputFile);
    var files = fs.readdirSync(base).filter(function (f) { return path.extname(f) === '.js'; });
    files.map(function (file) {
        code[file.replace(/\.js$/i, '')] = fs.readFileSync(path.join(base, file), 'utf8');
    });
    return code;
}
function getBranchName(branch$$1) {
    if (branch$$1 === 'auto') {
        return git.branch();
    }
    else {
        return branch$$1;
    }
}
function screeps(screepsOptions) {
    if (screepsOptions === void 0) { screepsOptions = {}; }
    return {
        name: "screeps",
        ongenerate: function (options, bundle) {
            if (options.sourcemap)
                generateSourceMaps(bundle);
        },
        onwrite: function (options, bundle) {
            if (options.sourcemap)
                writeSourceMaps(options);
            if (!screepsOptions.dryRun) {
                uploadSource((screepsOptions.configFile || screepsOptions.config), options, bundle);
            }
        }
    };
}

module.exports = screeps;
