'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var screepsApi = require('screeps-api');
var fs = require('fs');
var git = require('git-rev-sync');
var path = require('path');

function screeps(screepsOptions) {
    if (screepsOptions === void 0) { screepsOptions = {}; }
    return {
        name: "screeps",
        ongenerate: function (options, bundle) {
            if (options.sourcemap) {
                generateSourceMaps(bundle);
            }
        },
        onwrite: function (options, bundle) {
            if (options.sourcemap) {
                writeSourceMaps(options);
            }
            if (!screepsOptions.dryRun) {
                uploadSource(screepsOptions.configFile, options, bundle);
            }
        }
    };
}
function generateSourceMaps(bundle) {
    var tmp = bundle.map.toString;
    delete bundle.map.sourceContent;
    bundle.map.toString = function () {
        return "module.exports = " + tmp.apply(this, arguments) + ";";
    };
}
function writeSourceMaps(options) {
    fs.renameSync(options.file + '.map', options.file + '.map.js');
}
function uploadSource(configFile, options, bundle) {
    if (!configFile) {
        console.log('screeps() needs the path of your config file e.g. screeps({configFile: \'./screeps.json\'})');
        return;
    }
    else {
        var config = getConfig(configFile);
        var code_1 = getFileList(options.file);
        var branch_1 = getBranchName(config.branch);
        var api_1 = new screepsApi.ScreepsAPI();
        api_1.setServer(config);
        api_1.auth().then(function () {
            api_1.raw.user.branches().then(function (data) {
                var branches = data.list.map(function (b) { return b.branch; });
                if (branches.includes(branch_1)) {
                    api_1.code.set(branch_1, code_1);
                }
                else {
                    api_1.raw.user.cloneBranch('', branch_1, code_1);
                }
            });
        });
    }
}
function getConfig(configFile) {
    var data = fs.readFileSync(configFile, 'utf8');
    return JSON.parse(data);
}
function getFileList(outputFile) {
    var code = {};
    var base = path.dirname(outputFile);
    var files = fs.readdirSync(base).filter(function (f) { return path.extname(f) === '.js'; });
    files.map(function (file) {
        code[file.replace(/\.js$/i, '')] = fs.readFileSync(path.join(base, file), 'utf8');
    });
    return code;
}
function getBranchName(branch$$1) {
    if (branch$$1 === 'auto') {
        return git.branch();
    }
    else {
        return branch$$1;
    }
}

exports.screeps = screeps;
exports.generateSourceMaps = generateSourceMaps;
exports.writeSourceMaps = writeSourceMaps;
exports.uploadSource = uploadSource;
exports.getConfig = getConfig;
exports.getFileList = getFileList;
exports.getBranchName = getBranchName;
exports['default'] = screeps;
